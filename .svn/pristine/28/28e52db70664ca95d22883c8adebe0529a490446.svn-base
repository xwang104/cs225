/**
 * @file graph_tools.cpp
 * This is where you will implement several functions that operate on graphs.
 * Be sure to thoroughly read the comments above each function, as they give
 *  hints and instructions on how to solve the problems.
 */
#include <map>
#include "graph_tools.h"
using namespace std;

/**
 * Finds the minimum edge weight in the Graph graph.
 * THIS FUNCTION IS GRADED.
 *
 * @param graph - the graph to search
 * @return the minimum weighted edge
 *
 * @todo Label the minimum edge as "MIN". It will appear blue when
 *  graph.savePNG() is called in minweight_test.
 *
 * @note You must do a traversal.
 * @note You may use the STL stack and queue.
 * @note You may assume the graph is connected.
 *
 * @hint Initially label vertices and edges as unvisited.
 */
int GraphTools::findMinWeight(Graph& graph)
{
    /* Your code here! */

    setUnexplored(graph);
    Vertex start = graph.getStartingVertex();
    int min_weight = INT_MAX;

    Vertex min_v;
    Vertex min_w;

    queue<Vertex> q;
    graph.setVertexLabel(start, "VISITED");
    q.push(start);
    while(!q.empty()) {
        Vertex v = q.front();
        q.pop();
        vector<Vertex> adjacent = graph.getAdjacent(v);
        for (Vertex w : adjacent) {
            if (graph.getVertexLabel(w) == "UNEXPLORED") {
                graph.setEdgeLabel(v, w, "DISCOVERY");
                graph.setVertexLabel(w, "VISITED");
                q.push(w);
            } 
            else if (graph.getEdgeLabel(v, w) == "UNEXPLORED") 
                graph.setEdgeLabel(v, w, "CROSS");
            if(graph.getEdgeWeight(v, w) <= min_weight)
            {
                min_weight = graph.getEdgeWeight(v,w);
                min_v = v;
                min_w = w;
            }
        }
    }
    graph.setEdgeLabel(min_v, min_w, "MIN");
    return min_weight;

}

/**
 * Returns the shortest distance (in edges) between the Vertices
 *  start and end.
 * THIS FUNCTION IS GRADED.
 *
 * @param graph - the graph to search
 * @param start - the vertex to start the search from
 * @param end - the vertex to find a path to
 * @return the minimum number of edges between start and end
 *
 * @todo Label each edge "MINPATH" if it is part of the minimum path
 *
 * @note Remember this is the shortest path in terms of edges,
 *  not edge weights.
 * @note Again, you may use the STL stack and queue.
 * @note You may also use the STL's unordered_map, but it is possible
 *  to solve this problem without it.
 *
 * @hint In order to draw (and correctly count) the edges between two
 *  vertices, you'll have to remember each vertex's parent somehow.
 */
int GraphTools::findShortestPath(Graph& graph, Vertex start, Vertex end)
{
    /* Your code here! */

    map<Vertex, Vertex> vmap;
    setUnexplored(graph);
    queue<Vertex> q;
    graph.setVertexLabel(start, "VISITED");
    q.push(start);
    while(!q.empty()) {
        Vertex v = q.front();
        q.pop();
        vector<Vertex> adjacent = graph.getAdjacent(v);
        for (Vertex w : adjacent) {
            if (graph.getVertexLabel(w) == "UNEXPLORED") {
                vmap[w] = v;
                graph.setEdgeLabel(v, w, "DISCOVERY");
                graph.setVertexLabel(w, "VISITED");
                q.push(w);
            } 
            else if (graph.getEdgeLabel(v, w) == "UNEXPLORED")
                graph.setEdgeLabel(v, w, "CROSS");
       }
    }

    setUnexplored(graph);
    int count = 0;
    while (end != start) {
        graph.setEdgeLabel(end, vmap[end], "MINPATH");
        end = vmap[end];
        count++;
    }
    return count;

}

/**
 * Finds a minimal spanning tree on a graph.
 * THIS FUNCTION IS GRADED.
 *
 * @param graph - the graph to find the MST of
 *
 * @todo Label the edges of a minimal spanning tree as "MST"
 *  in the graph. They will appear blue when graph.savePNG() is called.
 *
 * @note Use your disjoint sets class from MP 7.1 to help you with
 *  Kruskal's algorithm. Copy the files into the libdsets folder.
 * @note You may call std::sort instead of creating a priority queue.
 */
void GraphTools::findMST(Graph& graph)
{
    /* Your code here! */

    vector <Edge> edges = graph.getEdges();
    sort(edges.begin(), edges.end(), sort_edge);
    vector <Vertex> vertex_list = graph.getVertices();
    DisjointSets vertices;
    vertices.addelements(vertex_list.size());

    for (Edge e : edges) {
        Vertex u = e.source;
        Vertex v = e.dest;
        if (vertices.find(u) != vertices.find(v)) {
            vertices.setunion(u,v);
            graph.setEdgeLabel(u,v,"MST");
        }
    }

}

bool GraphTools::sort_edge (Edge a, Edge b) {
    return (a.weight < b.weight);
}

void GraphTools::setUnexplored(Graph &graph)
{
    vector <Edge> edges = graph.getEdges();
    for (Edge e : edges) {
        Vertex u = e.source;
        Vertex v = e.dest;
        graph.setEdgeLabel(u, v, "UNEXPLORED");
    }  
    vector <Vertex> vertices = graph.getVertices();
    for (Vertex v : vertices)
        graph.setVertexLabel(v, "UNEXPLORED"); 
}
